---
const { prevUrl, nextUrl, pageLength, firstUrl, currentPage } = Astro.props;

// Ensure currentPage is within valid bounds
const normalizedCurrentPage = Math.max(1, Math.min(currentPage, pageLength));

// Define the range of pages to display based on the current page
const minPage = Math.max(1, normalizedCurrentPage - 1); // Ensure minPage is at least 1
const maxPage = Math.min(pageLength, normalizedCurrentPage + 1); // Ensure maxPage is within pageLength
---

<div class='space-x-10 hidden md:flex'>
    {firstUrl}
    {
        prevUrl && (
            <a
                class='flex bg-brand-red text-white rounded-full w-96 h-10 items-center justify-center hover:opacity-75'
                href={prevUrl}
            >
                {prevUrl}
            </a>
        )
    }

    {/* Always show the first page */}
    <a
        href={`${firstUrl}`}
        class={`flex ${currentPage === 1 ? 'bg-white border-2 border-brand-red text-brand-red hover:bg-brand-red pointer-events-none hover:text-white' : 'bg-brand-red text-white hover:opacity-75'} rounded-md w-10 h-10 items-center justify-center`}
    >
        {1}
    </a>

    {/* Show the next two pages after 1 when 1 is selected */}
    {
        currentPage === 1 && pageLength > 3 && (
            <>
                {Array.from({ length: Math.min(pageLength, 3) - 1 }, (_, i) => i + 2).map((num) => (
                    <a
                        href={`${firstUrl}?page=${num}`}
                        class={`flex w-96 bg-brand-red text-white rounded-md w-10 h-10 items-center justify-center hover:opacity-75`}
                    >
                        {`${firstUrl}?page=${num}`}
                    </a>
                ))}
            </>
        )
    }

    {/* Render '...' if the current page is more than 2 spaces away from the first page */}
    {
        currentPage > 3 && pageLength > 4 && (
            <span class='flex w-10 h-10 items-center justify-center'>...</span>
        )
    }

    {/* Render pages within the range */}
    {
        Array.from({ length: maxPage - minPage + 1 }, (_, i) => i + minPage).map(
            (num) =>
                (num !== 1 &&
                num !== pageLength) &&
                ((currentPage !== 1 &&
                currentPage !== pageLength) ||
                    (pageLength <= 3)) && ( // Exclude the first and last pages from the loop
                    <a
                        href={`${firstUrl}?page=${num}`}
                        class={`flex ${currentPage === num ? 'bg-white border-2 border-brand-red text-brand-red hover:bg-brand-red pointer-events-none hover:text-white' : 'bg-brand-red text-white hover:opacity-75'} rounded-md w-10 h-10 items-center justify-center`}
                    >
                        {num}
                    </a>
                ),
        )
    }

    {/* Render '...' if the current page is more than 2 spaces away from the last page */}
    {
        (pageLength - currentPage >= 3) && (pageLength > 4) && (
            <span class='flex w-10 h-10 items-center justify-center'> ...</span>
        )
    }

    {/* Show the previous two pages before the last page when the last page is selected */}
    {
        currentPage === pageLength && maxPage === pageLength && pageLength > 3 && (
            <>
                {Array.from(
                    { length: Math.min(pageLength - 1, 2) },
                    (_, i) => i + pageLength - 2,
                ).map(
                    (num) =>
                        num !== 1 &&
                        num !== pageLength && ( // Exclude the first and last pages from the loop
                            <a
                                href={`${firstUrl}?page=${num}`}
                                class={`flex bg-brand-red text-white rounded-md w-10 h-10 items-center justify-center hover:opacity-75`}
                            >
                                {num}
                            </a>
                        ),
                )}
            </>
        )
    }

    {/* Always show the last page */}
    {
        pageLength !== 1 && ( // Only render if there's more than 1 page
            <a
                href={`${firstUrl}?page=${pageLength}`}
                class={`flex ${currentPage === pageLength ? 'bg-white border-2 border-brand-red text-brand-red hover:bg-brand-red pointer-events-none hover:text-white' : 'bg-brand-red text-white hover:opacity-75'} rounded-md w-10 h-10 items-center justify-center`}
            >
                {pageLength}
            </a>
        )
    }

    {
        nextUrl && (
            <a
                class='flex bg-brand-red text-white rounded-full w-10 h-10 items-center justify-center hover:opacity-75'
                href={nextUrl}
            >
                <span class='icon-[maki--arrow]' />
            </a>
        )
    }
</div>
<div class='space-x-10 flex md:hidden'>
    {
        prevUrl && (
            <a
                class='flex bg-brand-red text-white rounded-full w-10 h-10 items-center justify-center hover:opacity-75'
                href={prevUrl}
            >
                <span class='icon-[maki--arrow] rotate-180' />
            </a>
        )
    }

    {
        nextUrl && (
            <a
                class='flex bg-brand-red text-white rounded-full w-10 h-10 items-center justify-center hover:opacity-75'
                href={nextUrl}
            >
                <span class='icon-[maki--arrow]' />
            </a>
        )
    }
</div>
